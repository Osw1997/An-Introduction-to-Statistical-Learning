primes <- c(1,2,3,7,11)
(15 + 5) / 2 * 2
# Se carga un cSV con NAs cnosiderándolos como ""
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
View(data)
# Se carga un cSV con datos connsiderándolos como NAs
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
# Se carga un cSV con datos connsiderándolos como NAs
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "_")
View(data)
# Se carga un cSV con datos connsiderándolos como NAs
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
# Data limpio
data_cleaned <- na.omit(data)
View(data_cleaned)
# Limpieza más selectiva
data.income,cleaned <- data[!is.na(data$Income),]
# Limpieza más selectiva
data.income.cleaned <- data[!is.na(data$Income),]
View(data.income.cleaned)
# comple
complete.cases(data)
data2[is.na(data2$Income),] = 3.14
# Cinvertir NAs en un cierto valor
data2 <- data
data2[is.na(data2$Income),] = 3.14
data2$Income[data2$Income == 0] = 3.14
View(data2)
# Cinvertir NAs en un cierto valor
data2 <- data
# Cinvertir NAs en un cierto valor
data2 <- data
data2$Income[data2$Income == 0] = NA
# MEdidas de centralización y despersión
mean(data$Income)
mean(data$Income, na.rm = T)
sd(data$Income)
sd(data$Income, na.rm = T)
# Se importan datos
data <- read.csv("../Data/tema1/missing-data.csv")
# Se importan datos
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
# Remplazar NA por el del promedio de la población
data$Income.mean
# Remplazar NA por el del promedio de la población
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income,
na.rm = T))
# Remplazar NA por el del promedio de la población
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income,na.rm = T),
income)
# Remplazar NA por el del promedio de la población
data$Income.mean <- ifelse(is.na(data$Income),
mean(data$Income,na.rm = T),
data$Income)
View(data)
View(data)
rand.inpute <- function(x) {
# Se consideran los valores faltantes
missing <- is.na(x)
# Cuántos valores NA hay en x
n.missing <- sum(missing)
# Se consideran los valores del DF que no son NA
x.obs <- x[!missing]
# Se devolverá el mismo DF
imputed <- x
# Pero con NAs remplazados
imputed[missing] <- sample(x.obs, n.missing, replace = T)
return(imputed)
}
# Se usa otra función que evalua cada columna del DF
random.input.data.frame <- function(df, cols) {
names < names(df)
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
}
random.input.data.frame(data, c(1,2))
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
random.input.data.frame(data, c(1,2))
random.input.data.frame(data, c(1,2))
print("llegó")
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
# Se usa otra función que evalua cada columna del DF
random.input.data.frame <- function(df, cols) {
names < names(df)
print("llegó")
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
}
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
random.input.data.frame(data, c(1,2))
# Se usa otra función que evalua cada columna del DF
random.input.data.frame <- function(df, cols) {
print("llegó")
names < names(df)
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
}
random.input.data.frame(data, c(1,2))
random.input.data.frame(data, c(1,2))
data
names(data)
random.input.data.frame(data, c(1,2))
names <- names(df)
# Se usa otra función que evalua cada columna del DF
random.input.data.frame <- function(df, cols) {
names <- names(df)
print("llegó")
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
}
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
random.input.data.frame(data, c(1,2))
# Se usa otra función que evalua cada columna del DF
random.input.data.frame <- function(df, cols) {
names <- names(df)
for (col in cols) {
name <- paste(col, '.inputed', sep = '')
df[name] <- rand.inpute(df[,col])
}
df
}
random.input.data.frame(data, c(1,2))
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
random.input.data.frame(data, c(1,2))
data <-random.input.data.frame(data, c(1,2))
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
data <-random.input.data.frame(data, c(1,2))
View(data)
data <- read.csv("../Data/tema1/missing-data.csv", na.strings = "")
data$Income[data$Income == 0] <- NA
data <-random.input.data.frame(data, c(1,2))
View(data)
40e3
salary <- c(40000, 60000,50000,80000,60000,70000,60000)
family.salary <- c(40000, 60000,50000,80000,60000,70000,60000)
family.salary <- c(40000, 60000,50000,80000,60000,70000,60000)
family.size <- c(4,3,2,2,3,4,3)
family.car <- c('Lujo', 'Compacto', 'Utilitario', "Lujo",
'Compacto', 'Compacto', 'Compacto')
family <- data.frame(family.salary, family.size, family.car)
unique(family)
duplicated(family)
family
install.packages('scales')
librar(scales)
library(scales)
# Se importan datos
students <- read.csv('../Data/tema1/data-conversion.csv')
library(scales)
# Se importan datos
students <- read.csv('../Data/tema1/data-conversion.csv')
View(students)
students$Income.rescaled <- rescale(students$Income)
View(students)
# Se importan datos
housing <- read.csv('../Data/tema1/BostonHousing.csv')
housing.z <- scale(housing)
View(housing.z)
# Considerando otros parámetros
housing.none <- scale(housing, center = F, scale = F)
View(housing.none)
View(housing)
View(housing.none)
housing.mean <- scale(housing, center = T, scale = T)
housing.mean <- scale(housing, center = T, scale = F)
housing.desv <- scale(housing, center = F, scale = T)
names(housing)
names <- names(housing)
names
names <- names(housing)
col in colSums()
col in cols
for col in cols {print(col)}
for (col in cols) {print(col)}
# Por si queremos rescalar varias columnas y no todas
scale.many = function(df, cols) {
names <- names(df)
for (col in cols) {
name <- paste(names[col], 'z', sep = '.')
df[name] <- scale(df[,col])
}
cat(paste('Se ha normalizado ', length(cols), " variables"))
return(df)
}
housing <- scale.many(housing, c(1,3,5:8))
View(housing)
housing <- scale.many(housing, c(1,3,5:8))
View(housing)
View(housing)
View(housing)
for (col in cols) {print()}
mean(c(1,24,4))
mean(c(1,24,4, NA))
mean(c(1,24,4, NA), na.rm = T)
# Se cargan los datos
studets <- read.csv('../Data/tema1/data-conversion.csv')
View(studets)
# Se definen breakpoints (Puntos de separación)
bp <- c(-Inf, 10e3, 31e3, Inf)
# Se cargan los datos
studets <- read.csv('../Data/tema1/data-conversion.csv')
# Creación de variables categóricas
names <- c('Low', 'Average', 'High')
# Se cargan los datos
students <- read.csv('../Data/tema1/data-conversion.csv')
studets$Income.cat <- cut(students$Income, breaks = bp, labels = names)
View(students)
studets$Income.cat <- cut(students$Income, breaks = bp, labels = names)
# Se cargan los datos
students <- read.csv('../Data/tema1/data-conversion.csv')
# Se definen breakpoints (Puntos de separación)
bp <- c(-Inf, 10e3, 31e3, Inf)
# Creación de variables categóricas
names <- c('Low', 'Average', 'High')
studets$Income.cat <- cut(students$Income, breaks = bp, labels = names)
students$Income.cat <- cut(students$Income, breaks = bp, labels = names)
View(students)
# Variables ficticias (dummies variables)
install.packages('dummies')
library(dummies)
students <- read.csv('../Data/tema1/data-conversion.csv')
# ¿Cómo trabajar con variables categóricas como si fueran numéricas?
students.dummy <- dummy.data.frame(students, sep = '.')
students <- read.csv('../Data/tema1/data-conversion.csv')
# ¿Cómo trabajar con variables categóricas como si fueran numéricas?
students.dummy <- dummy.data.frame(students, sep = '.')
View(students.dummy)
names(students.dummy)
# Si quiero convertir a variable dummy solo una columna
dummy(students$State, sep = '.')
students
dummy.data.frame(students, names = c("State", 'Gender'), sep = '.')
dummy.data.frame(students, names = c("State", 'Gender'), sep = '.')
# Se importan los datos
housing <- read.csv('../Data/tema1/housing-with-missing-value.csv')
# Se importan los datos
housing.data <- read.csv('../Data/tema1/housing-with-missing-value.csv')
# Se importan los datos
housing.data <- read.csv('../Data/tema1/housing-with-missing-value.csv')
# Se importan los datos
housing.data <- read.csv('../Data/tema1/housing-with-missing-value.csv',
header = T, stringsAsFactors = F)
View(housing.data)
# Se hace un sumario de los datos importados
summary(housing.data)
# Se hace un sumario de los datos importados
summary(housing.data)
# Se pueden eliminar las NA pero de ciertas columnas
drop_na <- c('rad')
housing.data.2 <- housing.data[complete.cases(housing.data[,!(names(housing.data))%in%drop.na])]
housing.data.2 <- housing.data[complete.cases(housing.data[,!(names(housing.data))%in%drop_na])]
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na])]
# Se pueden eliminar las NA pero de ciertas columnas
drop_na <- c('rad')
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na])]
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na]),]
summary(housing.data.2)
# Sin embargo, si se requiere eliminar toda una columna,
# se aplica NULL a toda ella
housing.data.2$rad <- NULL
summary(housing.data.2)
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na]),]
# O si quiero eliminar 2 columnas
drop_nas <- c('rad', 'ptratio')
housing.data.3 <- housing.data[,!names(housing.data)%in%drop_nas]
summary(housing.data.3)
# # Lo siguientes es completar datos :)
# Se usa la librería Hmisc
install.packages('Hmisc')
library(Hmisc)
housing.data.copy1 <- housing.data
housing.data.copy1$ptratio <- impute(housing.data.copy1$ptratio, mean)
# De igual forma con 'rad'
housing.data.copy1$rad -< impute(housing.data.copy1$rad, mean)
summary(hou)
summary(housing.data.copy1)
# De igual forma con 'rad'
housing.data.copy1$rad <- impute(housing.data.copy1$rad, mean)
summary(housing.data.copy1)
housing.data.copy2 <- housing.data
# Se sustituye los vlaores nulos de 'ptratio' por su media
housing.data.copy1$ptratio <- impute(housing.data.copy2$ptratio, median)
# De igual forma con 'rad'
housing.data.copy1$rad <- impute(housing.data.copy2$rad, median)
# Se corrobora
summary(housing.data.copy2)
source('~/GD/R/Scripts/tema1/12-missing-data.R', echo=TRUE)
install.packages("Hmisc")
housing.data <- read.csv('../Data/tema1/housing-with-missing-value.csv',
header = T, stringsAsFactors = F)
housing.data <- read.csv('../Data/tema1/housing-with-missing-value.csv',
header = T, stringsAsFactors = F)
housing.data.copy1 <- housing.data
# Se sustituye los vlaores nulos de 'ptratio' por su media
housing.data.copy1$ptratio <- impute(housing.data.copy1$ptratio, mean)
# De igual forma con 'rad'
housing.data.copy1$rad <- impute(housing.data.copy1$rad, mean)
# Se corrobora
summary(housing.data.copy1)
# Ahora con la mediana
housing.data.copy2 <- housing.data
# Se sustituye los vlaores nulos de 'ptratio' por su media
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
# De igual forma con 'rad'
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
# Se corrobora
summary(housing.data.copy2)
# Ahora con un valor medio
housing.data.copy3 <- housing.data
# Se sustituye los vlaores nulos de 'ptratio' por su media
housing.data.copy3$ptratio <- impute(housing.data.copy3$ptratio, mean)
# De igual forma con 'rad'
housing.data.copy3$rad <- impute(housing.data.copy3$rad, mean)
# Se corrobora
summary(housing.data.copy3)
housing.data.copy3 <- housing.data
# Se sustituye los vlaores nulos de 'ptratio' por su media
housing.data.copy3$ptratio <- impute(housing.data.copy3$ptratio, 21)
# De igual forma con 'rad'
housing.data.copy3$rad <- impute(housing.data.copy3$rad, 9)
# Se corrobora
summary(housing.data.copy3)
# Se usa la librería 'misc' para hacer dicha labor
install.packages('misc')
# Se usa la librería 'misc' para hacer dicha labor
install.packages('mice')
c(1,5,4)[-2]
plot(cars)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('../Data/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('../Data/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('../Data/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('../Datasets/Auto.csv')
setwd("~/Self development/An-Introduction-to-Statistical-Learning")
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('../Datasets/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('Datasets/Auto.csv')
read.csv('Datasets/Auto.csv'
)
read.csv('Datasets/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('Datasets/Auto.csv')
auto <- read.csv('Datasets/Auto.csv')
auto
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('Datasets/Auto.csv')
wd
getwd()
auto <- read.csv('~/Datasets/Auto.csv')
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~Datasets/Auto.csv')
auto <- read.csv('~Datasets/Auto.csv')
auto <- read.csv('~/Datasets/Auto.csv')
auto <- read.csv('~/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
auto <- read.csv('~/Self-development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
lm?
:
?lm
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(mpg ~ horsepower, auto)
linear_regression
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(mpg ~ horsepower, data=auto)
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
summary(linear_regression)
linear_regression.fit
linear_regression.fit()
auto
plot(auto$mpg, auto$horsepower)
scatter_plot.title <- "Hola"
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$mpg, auto$horsepower)
scatter_plot.title <- "Hola"
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$mpg, auto$horsepower, title="Hola")
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
plot?
:
?plot
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$mpg, auto$horsepower)
title("Scatter plot mpg Vs Horsepower")
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$mpg, auto$horsepower)
title("Scatter plot mpg Vs Horsepower")
xlab("Mpg")
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$horsepower, auto$mpg)
title("Scatter plot mpg Vs Horsepower", xlab="Horsepower", ylab="Mpg")
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$horsepower, auto$mpg, type="p")
title("Scatter plot mpg Vs Horsepower", xlab="Horsepower", ylab="Mpg")
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
scatter_plot <- plot(auto$horsepower, auto$mpg, type="p", main="Scatter plot mpg Vs Horsepower", xlab="Horsepower", ylab="Mpg")
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
#### Linear Regression
###
### Applied exercises
## Exercise 8
# Involved dataset: Auto
auto <- read.csv('~/Self development/An-Introduction-to-Statistical-Learning/Datasets/Auto.csv')
plot(auto$horsepower, auto$mpg,
type="p", main="Scatter plot mpg Vs Horsepower",
xlab="Horsepower", ylab="Mpg",
pch=19)
# Linear regression mpg = B_0 + B_1 * horsepower
linear_regression = lm(formula=mpg ~ horsepower, data=auto)
View(auto)
